# -*- mode: org -*
#+title:  EMACS CONFIGURATION FILE

* Melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

* Requires
#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (require 'company)
  (require 'lsp-mode)
  (require 'helm)
  (require 'which-key)
  (require 'swiper)
  (require 'undo-tree)
  (require 'org)
  (require 'openwith)
#+END_SRC

* Evil 
** turn on evil-mode
#+BEGIN_SRC emacs-lisp
  (evil-mode 1)
#+END_SRC

** use undo-tree for undo/redo in evil mode
#+BEGIN_SRC emacs-lisp
  (evil-set-undo-system 'undo-tree)
#+END_SRC

** turn off evil-mode in term-mode
#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'term-mode 'emacs)
#+END_SRC

* Functions
** adding new functions
*** is-user-buffer
#+BEGIN_SRC emacs-lisp
  (defun r760-is-user-buffer()
    "check if current buffer is a user buffer"
    (interactive)
    (if (and (or (not (string-match "^\*.*\*$" (buffer-name))) (string-match "^\*scratch\*.*$" (buffer-name))) (not (string-equal major-mode "dired-mode"))) t 'nil))
#+END_SRC

*** open-timesheet
#+BEGIN_SRC emacs-lisp
  (defun r760-timesheet (timesheet-dir-path)
    "open timesheet (or create it in the give timesheet-dir-path, if it does not exist)"
    (interactive)
    (let (fpath)
      (if (not (file-directory-p timesheet-dir-path)) (dired-create-directory timesheet-path))
      (setq fpath (concat timesheet-dir-path "/" (format-time-string "%Y-%m-%d") ".org"))
      (find-file fpath)
      (if (file-exists-p fpath) nil
        (insert "* TIMESHEET")
        (org-clock-report)
        (save-buffer))
      (evil-goto-line)))
#+END_SRC

*** print mark list
#+BEGIN_SRC emacs-lisp
  (defun r760-print-mark-list ()
    ;; print r760-mark list
    (interactive)
    (print r760-mark))
#+END_SRC

*** save mark
#+BEGIN_SRC emacs-lisp
  (defun r760-save-mark ()
    ;; save mark ie. current buffer-name, point to r760-mark list
    (interactive)
    (let ((buffer-name (buffer-name)) (buffer-pos (point)))
      (setq r760-mark (delete-dups (append r760-mark (list (list buffer-name buffer-pos)))))))
#+END_SRC

*** delete mark
#+BEGIN_SRC emacs-lisp
  (defun r760-delete-mark ()
    ;; delete mark ie. current buffer-name, point from r760-mark list
    (interactive)
    (let ((buffer-name (buffer-name)) (buffer-pos (point)))
      (let ((mark (list buffer-name buffer-pos)))
        (when (-contains-p r760-mark mark)
          (setq r760-mark (delete mark r760-mark))
          (setq r760-mark-index (- r760-mark-index 1))))))
#+END_SRC

*** delete all marks
#+BEGIN_SRC emacs-lisp
  (defun r760-delete-all-marks ()
    ;; delete all marks from r760-mark list
    (interactive)
    (setq r760-mark '())
    (setq r760-mark-index 0))
#+END_SRC

*** cycle mark forward
#+BEGIN_SRC emacs-lisp
  (defun r760-cycle-marks-forward ()
    ;; jump to next mark in r760-mark list
    (interactive)
    (let ((number-of-marks (length r760-mark)))
      (when (>= number-of-marks 1) 
        (setq r760-mark-index (+ r760-mark-index 1))
        (if (or (<= r760-mark-index -1) (>= r760-mark-index number-of-marks))
            (setq r760-mark-index 0))
        (let ((mark (nth r760-mark-index r760-mark)))
          (let ((buffer-name (nth 0 mark)) (buffer-pos (nth 1 mark)))
            (switch-to-buffer buffer-name)
            (goto-char buffer-pos))))))
#+END_SRC

*** cycle mark backward
#+BEGIN_SRC emacs-lisp
  (defun r760-cycle-marks-backward ()
    ;; jump to previous mark in r760-mark list
    (interactive)
    (let ((number-of-marks (length r760-mark)))
      (when (>= number-of-marks 1) 
        (setq r760-mark-index (- r760-mark-index 1))
        (if (or (<= r760-mark-index -1) (>= r760-mark-index number-of-marks))
            (setq r760-mark-index (- number-of-marks 1)))
        (let ((mark (nth r760-mark-index r760-mark)))
          (let ((buffer-name (nth 0 mark)) (buffer-pos (nth 1 mark)))
            (switch-to-buffer buffer-name)
            (goto-char buffer-pos))))))
#+END_SRC

*** dired goto first file
#+BEGIN_SRC emacs-lisp
  (defun r760-dired-goto-first-file()
    (interactive)
    (beginning-of-buffer)
    (dired-next-line 4))
#+END_SRC

*** dired goto last file
#+BEGIN_SRC emacs-lisp
  (defun r760-dired-goto-last-file()
    (interactive)
    (end-of-buffer)
    (dired-previous-line 1))
#+END_SRC
* Basic
** turn off menu-bar-mode
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC

** turn off scroll-bar-mode
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
#+END_SRC

** turn off tool-bar-mode
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC

** turn off splash-screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

** turn on time-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'display-time-mode)
#+END_SRC

** turn on battery-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'display-battery-mode)
#+END_SRC

** turn on line numbering for prog-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** enable X window system copy/paste
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC

** set default window split direction to horizontal
#+BEGIN_SRC emacs-lisp
  ;; (setq split-width-threshold nil)
#+END_SRC

** set backup-saves directory
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs-saves")))
#+END_SRC

** open PDF files with open
#+BEGIN_SRC emacs-lisp
  (openwith-mode t)
  (setq openwith-associations '(("\\.pdf\\'" "open" (file))))
#+END_SRC

** enable repeat mode
#+BEGIN_SRC emacs-lisp
  (repeat-mode)
#+END_SRC

** auto save bookmarks
#+BEGIN_SRC emacs-lisp
  (setq bookmark-save-flag 1)
  #+END_SRC

** mark variables
#+BEGIN_SRC emacs-lisp
  (setq r760-mark '())
  (setq r760-mark-index 0)
#+END_SRC

* Dired
** disable space key
#+BEGIN_SRC emacs-lisp
  (eval-after-load "dired" '(define-key dired-mode-map (kbd "<SPC>") nil))
  (eval-after-load "dired" '(define-key dired-mode-map (kbd "M-s") nil))
  (eval-after-load "dired" '(evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory))
  (add-hook 'dired-mode-hook
            (lambda ()
              (evil-define-key 'normal dired-mode-map
                (kbd "h") 'dired-up-directory
                (kbd "l") 'dired-find-file
                (kbd "gg") 'r760-dired-goto-first-file
                (kbd "G") 'r760-dired-goto-last-file)))
  #+END_SRC

* Recentf
** turn on recentf-mode
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  #+END_SRC

* Org
** set maxlevel of clock table to 3
#+BEGIN_SRC emacs-lisp
  (setq org-clock-clocktable-default-properties '(:maxlevel 3))
#+END_SRC

* Undo-tree
** turn on undo-tree mode for prog-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'undo-tree-mode)
#+END_SRC

** set undo-tree history directory
#+BEGIN_SRC emacs-lisp
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+END_SRC

** turn on undo-tree mode for org-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (undo-tree-mode)
              (org-indent-mode)))
#+END_SRC

* Company
** turn on company mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

* Which-key
** turn on which-key-mode
#+BEGIN_SRC emacs-lisp
  (which-key-mode 1)
#+END_SRC

* Electric pair
** turn on electric-pair-mode
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC

* Winner
** turn on winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

* Keybindings
** replace existing keybindings
*** helm find files
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC

*** helm buffers list
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
#+END_SRC

*** helm bookmarks
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x rl") 'helm-bookmarks)
#+END_SRC

*** helm meta-x
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

*** replace default emacs search with swiper
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
#+END_SRC

*** open window below
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "C-x 2" "open window below")
  (global-set-key
   (kbd "C-x 2")
   (lambda ()
     (interactive)
     (split-window-vertically)
     (other-window 1)))
#+END_SRC

*** open window to the right
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "C-x 3" "open window to the right")
  (global-set-key
   (kbd "C-x 3")
   (lambda ()
     (interactive)
     (split-window-horizontally)
     (other-window 1)))
#+END_SRC

** adding new keybindings
*** groups
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>B" "bookmark")
  (which-key-add-key-based-replacements "<SPC>c" "comp/interp/dbg")
  (which-key-add-key-based-replacements "<SPC>g" "git")
  (which-key-add-key-based-replacements "<SPC>i" "interactive")
  (which-key-add-key-based-replacements "<SPC>s" "shell/terminal")
  (which-key-add-key-based-replacements "<SPC>x" "xref")
#+END_SRC

*** evaluate current buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x e") 'eval-buffer)
#+END_SRC

*** compile
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f6>") 'compile)
  (evil-define-key 'normal 'global (kbd "<SPC>cc") 'compile)
#+END_SRC

*** recompile
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'recompile)
  (evil-define-key 'normal 'global (kbd "<SPC>cr") 'recompile)
#+END_SRC

*** revert-buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f7>") 'revert-buffer)
#+END_SRC

*** next-error
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>cn") 'next-error)
#+END_SRC

*** previous-error
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>cp") 'previous-error)
#+END_SRC

*** gdb
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>cd") 'gdb)
#+END_SRC

*** interpret current file
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>ci" "interpret current file")
  (evil-define-key 'normal 'global (kbd "<SPC>ci")
    (lambda ()
      (interactive)
      (executable-interpret (buffer-file-name))))
#+END_SRC

*** git diff current file
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>gd") 'vc-diff)
#+END_SRC

*** git diff
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>gD") 'vc-root-diff)
#+END_SRC

*** git log
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>gl") 'vc-print-root-log)
#+END_SRC

*** run shell command
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>sc") 'shell-command)
#+END_SRC

*** run async shell command
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>sa") 'async-shell-command)
#+END_SRC

*** open a mini bash terminal below
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>st" "open a mini terminal below")
  (evil-define-key 'normal 'global (kbd "<SPC>st")
    (lambda ()
      (interactive)
      (split-window-vertically)
      (other-window 1)
      (shrink-window 10)
      (term "/bin/bash")))
#+END_SRC

*** imenu
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>if") 'imenu)
#+END_SRC

*** ibuffer
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>ib") 'ibuffer)
#+END_SRC

*** grep
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>ig") 'grep)
#+END_SRC

*** rgrep
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>iG") 'rgrep)
#+END_SRC

*** proced
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>ip") 'proced)
#+END_SRC

*** undo previous window action
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>u") 'winner-undo)
#+END_SRC

*** xref-find-definitions
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>xd") 'xref-find-definitions)
#+END_SRC

*** xref-find-definition
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>xD") 'xref-find-definitions-other-window)
#+END_SRC

*** edit emacs configuration file
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>e" "edit emacs config")
  (evil-define-key 'normal 'global (kbd "<SPC>e")
    (lambda ()
      (interactive)
      (find-file "~/.emacs.d/emacs.org")))
#+END_SRC

*** open timesheet
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>o" "open timesheet")
  (evil-define-key 'normal 'global (kbd "<SPC>o")
    (lambda ()
      (interactive)
      (r760-timesheet "~/wlog")))
#+END_SRC

*** org export
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>O" "org-export-dispatch")
  (evil-define-key 'normal 'global (kbd "<SPC>O")
    (lambda ()
      (interactive)
      (org-export-dispatch)))
#+END_SRC

*** set bookmark
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>Bs") 'bookmark-set)
#+END_SRC

*** delete bookmark
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>Bd") 'bookmark-delete)
#+END_SRC

*** list bookmarks
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>Bl") 'helm-bookmarks)
#+END_SRC

*** open a recent file
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>r") 'recentf-open-files)
#+END_SRC

*** list buffers
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>b") 'helm-buffers-list)
#+END_SRC

*** kill buffer
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>k") 'kill-buffer)
#+END_SRC

*** man
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>m") 'man)
#+END_SRC

*** dired
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>d") 'dired)
#+END_SRC

*** dired jump
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>D") 'dired-jump)
#+END_SRC

*** helm-find-files
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>f") 'helm-find-files)
#+END_SRC

*** helm-find
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>F") 'helm-find)
#+END_SRC

*** save mark
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-e")
                  (lambda ()
                    (interactive)
                    (r760-save-mark)
                    (message "Mark saved")))
#+END_SRC

*** delete mark
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-r")
                  (lambda ()
                    (interactive)
                    (r760-delete-mark)
                    (message "Mark deleted")))
#+END_SRC

*** cycle mark forward
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-w")
                  (lambda ()
                    (interactive)
                    (r760-cycle-marks-forward)
                    (message "Mark cycled")))
#+END_SRC

*** cycle mark backward
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-q")
                  (lambda ()
                    (interactive)
                    (r760-cycle-marks-backward)
                    (message "Mark cycled")))
#+END_SRC

*** next-user-buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-s")
                  (lambda ()
                    (interactive)
                    (let ((orig-buffer (buffer-name)))
                      (next-buffer)
                      (while (and (not (r760-is-user-buffer)) (not (string-equal (buffer-name) orig-buffer))) (next-buffer)))))
#+END_SRC

*** previous-user-buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-a")
                  (lambda ()
                    (interactive)
                    (let ((orig-buffer (buffer-name)))
                      (previous-buffer)
                      (while (and (not (r760-is-user-buffer)) (not (string-equal (buffer-name) orig-buffer))) (previous-buffer)))))
#+END_SRC

* C
** enable lsp-mode, and disable lsp-indentation
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "k&r")
  (add-hook 'c-mode-hook
            (lambda ()
              (lsp)
              (xref-etags-mode)
              (setq lsp-enable-indentation nil)))
#+END_SRC
