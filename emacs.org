# -*- mode: org -*
#+title:  EMACS CONFIGURATION FILE

* Melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC

* Preload
** global variables
#+BEGIN_SRC emacs-lisp
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
#+END_SRC

* Requires
#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (require 'company)
  (require 'lsp-mode)
  (require 'helm)
  (require 'which-key)
  (require 'swiper)
  (require 'undo-tree)
  (require 'org)
  (require 'magit)
  (require 'evil-collection)
  (require 'yasnippet)
  (require 'vterm)
#+END_SRC

* Load custom packages
** motion, dired
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/motion.el")
  (load "~/.emacs.d/dired.el")
#+END_SRC

#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (setq-default yas-installed-snippets-dir '("~/.emacs.d/snippets"))
  (setq-default yas-snippet-dirs '("~/.emacs.d/snippets"))
  (add-to-list 'load-path "~/.emacs.d/snippets")
  (yas-reload-all)
#+END_SRC

* Evil 
** turn on evil-mode
#+BEGIN_SRC emacs-lisp
  (evil-mode 1)
#+END_SRC

** turn on evil-mode for magit
#+BEGIN_SRC emacs-lisp
  (evil-collection-init '(magit))
  (evil-collection-init '(dired))
  (evil-collection-init '(compile))
  (evil-collection-init '(help))
  (evil-collection-init '(grep))
  (evil-collection-init '(ripgrep))
  (evil-collection-init '(vterm))
  (evil-collection-init '(man))
#+END_SRC

** use undo-tree for undo/redo in evil mode
#+BEGIN_SRC emacs-lisp
  (evil-set-undo-system 'undo-tree)
#+END_SRC

** turn off evil-mode in term-mode
#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'term-mode 'emacs)
#+END_SRC

* Functions
** timesheet
#+BEGIN_SRC emacs-lisp
  (defun r760-timesheet (dir-path)
    "Open timesheet (create one in `dir-path' if it does not exist) and update clock report.

Version: 2023-10-08"
    (interactive)
    (let ((fpath nil))
      (if (not (file-directory-p dir-path))
          (dired-create-directory timesheet-path)
        nil)
      (setq fpath (concat dir-path "/" (format-time-string "%Y-%m-%d") ".org"))
      (find-file fpath)
      (if (file-exists-p fpath) nil
        (insert "* TIMESHEET")
        (org-clock-report)
        (end-of-buffer)
        (insert "** PROJECT")
        (org-clock-in)
        (org-show-all)
        (save-buffer)
        (end-of-buffer))
      (save-excursion
        (end-of-buffer)
        (while (search-backward-regexp "CLOCK:" nil t)
          (org-ctrl-c-ctrl-c))
        (if (search-backward-regexp "BEGIN" nil t)
            (org-ctrl-c-ctrl-c)))))
#+END_SRC

* Basic
** turn off menu-bar-mode
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
#+END_SRC

** turn off scroll-bar-mode
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
#+END_SRC

** turn off tool-bar-mode
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC

** turn off splash-screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

** turn on line numbering for prog-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** enable X window system copy/paste
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC

** set default window split direction to vertical
#+BEGIN_SRC emacs-lisp
  (setq split-width-threshold 1)
#+END_SRC

** set backup-saves directory
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs-saves")))
#+END_SRC

** enable repeat mode
#+BEGIN_SRC emacs-lisp
  (repeat-mode)
#+END_SRC

** auto save bookmarks
#+BEGIN_SRC emacs-lisp
  (setq bookmark-save-flag 1)
  #+END_SRC

** highlight line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

* Dired
** disable space key
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (evil-define-key 'normal dired-mode-map
                (kbd "<SPC>") 'nil
                (kbd "M-s") 'nil
                (kbd "h") 'dired-up-directory
                (kbd "l") 'dired-find-file
                (kbd "gg") 'r760-dired-first-file
                (kbd "G") 'r760-dired-last-file)
              (auto-revert-mode)))
  #+END_SRC

* Help
** disable space key
#+BEGIN_SRC emacs-lisp
  (add-hook 'help-mode-hook
            (lambda ()
              (evil-define-key 'normal help-mode-map
                (kbd "<SPC>") 'nil)))
#+END_SRC

* Man
** disable space key
#+BEGIN_SRC emacs-lisp
  (add-hook 'Man-mode-hook
            (lambda ()
              (evil-define-key 'normal Man-mode-map
                (kbd "<SPC>") 'nil)))
#+END_SRC

* Recentf
** turn on recentf-mode
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  #+END_SRC

* Org
** set maxlevel of clock table to 3
#+BEGIN_SRC emacs-lisp
  (setq org-clock-clocktable-default-properties '(:maxlevel 3))
#+END_SRC

* Undo-tree
** turn on undo-tree mode for prog-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'undo-tree-mode)
#+END_SRC

** set undo-tree history directory
#+BEGIN_SRC emacs-lisp
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+END_SRC

** turn on undo-tree mode for org-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (undo-tree-mode)
              (org-indent-mode)))
#+END_SRC

* Company
** turn on company mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

* Which-key
** turn on which-key-mode
#+BEGIN_SRC emacs-lisp
  (which-key-mode 1)
#+END_SRC

* Winner
** turn on winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

* Keybindings
** replace existing keybindings
*** helm find files
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC

*** helm buffers list
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
#+END_SRC

*** helm bookmarks
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x rl") 'helm-bookmarks)
#+END_SRC

*** helm meta-x
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

*** replace default emacs search with swiper
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
#+END_SRC

*** open window below
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 2") 'r760-motion-split-window-vertically)
#+END_SRC

*** open window to the right
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x 3") 'r760-motion-split-window-horizontally)
#+END_SRC

** adding new keybindings
*** groups
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>;" "current buffer")
  (which-key-add-key-based-replacements "<SPC>c" "comp/interp/dbg")
  (which-key-add-key-based-replacements "<SPC>g" "git")
  (which-key-add-key-based-replacements "<SPC>i" "interactive")
  (which-key-add-key-based-replacements "<SPC>s" "shell/terminal")
  (which-key-add-key-based-replacements "<SPC>x" "xref")
  (which-key-add-key-based-replacements "<SPC>e" "emacs config")
#+END_SRC

*** evaluate current buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x e") 'eval-buffer)
#+END_SRC

*** compile
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f3>") 'compile)
  (evil-define-key 'normal 'global (kbd "<SPC>cc") 'compile)
#+END_SRC

*** recompile
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f4>") 'recompile)
  (evil-define-key 'normal 'global (kbd "<SPC>cr") 'recompile)
#+END_SRC

*** revert-buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

*** next-error
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>cn") 'next-error)
#+END_SRC

*** previous-error
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>cp") 'previous-error)
#+END_SRC

*** gdb
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>cd") 'gdb)
#+END_SRC

*** interpret current file
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>ci" "interpret current file")
  (evil-define-key 'normal 'global (kbd "<SPC>ci")
    (lambda ()
      (interactive)
      (executable-interpret (buffer-file-name))))
#+END_SRC

*** magit
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>g")
    (lambda ()
      (interactive)
      (magit-status)
      (delete-other-windows)))
#+END_SRC

*** run shell command
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>sc") 'shell-command)
#+END_SRC

*** run async shell command
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>sa") 'async-shell-command)
#+END_SRC

*** open a mini bash terminal below
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>st" "open a mini terminal below")
  (evil-define-key 'normal 'global (kbd "<SPC>st")
    (lambda ()
      (interactive)
      (split-window-vertically)
      (other-window 1)
      (shrink-window 10)
      (term "/bin/bash")))
#+END_SRC

*** imenu
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>if") 'imenu)
#+END_SRC

*** ibuffer
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>ib") 'ibuffer)
#+END_SRC

*** grep
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>iG") 'grep)
#+END_SRC

*** rgrep
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>ig") 'rgrep)
#+END_SRC

*** proced
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>ip") 'proced)
#+END_SRC

*** undo previous window action
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>u") 'winner-undo)
#+END_SRC

*** xref-find-definitions
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>xd") 'xref-find-definitions)
#+END_SRC

*** xref-find-definition
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>xD") 'xref-find-definitions-other-window)
#+END_SRC

*** edit emacs configuration file
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>ee" "edit")
  (evil-define-key 'normal 'global (kbd "<SPC>ee")
    (lambda ()
      (interactive)
      (find-file "~/.emacs.d/emacs.org")))
#+END_SRC

*** edit emacs configuration file
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>er" "reload")
  (evil-define-key 'normal 'global (kbd "<SPC>er")
    (lambda ()
      (interactive)
      (org-babel-load-file "~/.emacs.d/emacs.org")))
#+END_SRC

*** open timesheet
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>o" "open timesheet")
  (evil-define-key 'normal 'global (kbd "<SPC>o")
    (lambda ()
      (interactive)
      (r760-timesheet "~/wlog")))
#+END_SRC

*** org export
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>O" "org-export-dispatch")
  (evil-define-key 'normal 'global (kbd "<SPC>O")
    (lambda ()
      (interactive)
      (org-export-dispatch)))
#+END_SRC

*** list bookmarks
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>B") 'helm-bookmarks)
#+END_SRC

*** open a recent file
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>r") 'recentf-open-files)
#+END_SRC

*** save buffer
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>;s") 'save-buffer)
#+END_SRC

*** revert buffer
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>;r") 'revert-buffer)
#+END_SRC

*** list matching lines
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>;l") 'list-matching-lines)
#+END_SRC

*** copy matching lines
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>;c") 'copy-matching-lines)
#+END_SRC

*** kill matching lines
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>;k") 'kill-matching-lines)
#+END_SRC

*** delete non matching lines
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>;d") 'delete-non-matching-lines)
#+END_SRC

*** make current file executable
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>;x" "make executable")
  (evil-define-key 'normal 'global (kbd "<SPC>;x")
    (lambda ()
      (interactive)
      (shell-command-to-string (message "%s %s" "chmod +x" (buffer-file-name)))))
#+END_SRC

*** list buffers
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>b") 'helm-buffers-list)
#+END_SRC

*** kill buffer
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>k") 'kill-buffer)
#+END_SRC

*** man
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>m") 'man)
#+END_SRC

*** dired
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>d") 'dired)
#+END_SRC

*** dired jump
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>D") 'dired-jump)
#+END_SRC

*** helm-find-files
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>f") 'helm-find-files)
#+END_SRC

*** helm-find
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>F") 'helm-find)
#+END_SRC

*** helm-show-kill-ring
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC>p") 'helm-show-kill-ring)
#+END_SRC

*** set mark
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-e") 'r760-motion-set-mark)
#+END_SRC

*** delete mark
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-r") 'r760-motion-delete-mark)
#+END_SRC

*** go to next mark
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-w") 'r760-motion-next-mark)
#+END_SRC

*** go to previous mark
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-q") 'r760-motion-previous-mark)
#+END_SRC

*** next user buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-s") 'r760-motion-next-user-buffer)
#+END_SRC

*** previous user buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-a") 'r760-motion-previous-user-buffer)
#+END_SRC

*** toggle vterm
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-t") 'r760-motion-toggle-vterm)
  (define-key vterm-mode-map (kbd "M-t") #'r760-motion-toggle-vterm)
#+END_SRC

*** ctrl + x + {o,0,1,2,3}
#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal 'global (kbd "<SPC><SPC>") 'other-window)
  (evil-define-key 'normal 'global (kbd "<SPC>0") 'delete-window)
  (evil-define-key 'normal 'global (kbd "<SPC>1") 'delete-other-windows)
  (evil-define-key 'normal 'global (kbd "<SPC>2") 'r760-motion-split-window-vertically)
  (evil-define-key 'normal 'global (kbd "<SPC>3") 'r760-motion-split-window-horizontally)
#+END_SRC

*** ctrl + x + {+,-,0}
#+BEGIN_SRC emacs-lisp
  (which-key-add-key-based-replacements "<SPC>7" "zoom out")
  (evil-define-key 'normal 'global (kbd "<SPC>7")
    (lambda ()
      (interactive)
      (text-scale-adjust -1)))

  (which-key-add-key-based-replacements "<SPC>8" "zoom in")
  (evil-define-key 'normal 'global (kbd "<SPC>8")
    (lambda ()
      (interactive)
      (text-scale-adjust 1)))

  (which-key-add-key-based-replacements "<SPC>9" "zoom reset")
  (evil-define-key 'normal 'global (kbd "<SPC>9")
    (lambda ()
      (interactive)
      (text-scale-adjust 0)))
#+END_SRC

* C
** enable lsp-mode, and disable lsp-indentation
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "k&r")
  (setq-default c-basic-offset 2)
  (add-hook 'c-mode-hook
            (lambda ()
              (lsp)
              (xref-etags-mode)
              (yas-minor-mode)
              (evil-local-set-key 'insert (kbd "<backtab>") 'yas-expand)
              (setq lsp-enable-indentation nil)))
#+END_SRC

* Startup
** server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
